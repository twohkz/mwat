{"version":3,"sources":["components/navbar/index.js","components/crypto/Weather.js","components/crypto/index.js","components/progressbar/index.js","components/Profile/index.js","components/Contact/index.js","components/kucoin/index.js","components/home/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","process","alt","to","href","Weather","props","tempreature","city","rank","humidity","pressure","description","error","Crypto","state","MwatAmout","priceUSD","Result","KWTAmount","KWTPrice","KWTMonthly","KWTYearly","_changeAmout","bind","e","target","validity","valid","newNum1","value","newPrice","this","price","year","month","setState","console","log","onSubmit","getCrypto","type","name","placeholder","onChange","Component","ProgressLine","label","backgroundColor","visualParts","percentage","color","useState","map","widths","setWidths","useEffect","requestAnimationFrame","item","style","index","key","width","Profile","Math","round","pricerounded","class","Contact","action","cols","rows","Kucoin","Home","da","require","rp","method","uri","qs","headers","json","gzip","then","response","data","cmc_rank","id","slug","quote","USD","catch","err","message","setTimeout","getData","App","exact","strict","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9df4dcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './style.css';\r\n//import logo from './logo.png';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    return(\r\n        \r\n        <div className=\"navbar\">\r\n            \r\n            <div className=\"container\">\r\n                \r\n                <div className=\"logo\">\r\n                    <img src={process.env.PUBLIC_URL + '/logo.png'} alt=\"logo\" />\r\n                    \r\n                </div>\r\n                \r\n                <ul className=\"ul-list\">\r\n                    <li className=\"list-item\"><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"list-item\"><Link to=\"/BuyMwat\">Buy it</Link></li>\r\n                    <li className=\"list-item\"><a href=\"#\">Project</a></li>\r\n                    <li className=\"list-item\"><Link to=\"/Contact\">Contact</Link></li>\r\n                </ul>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react' ;\r\nimport './style.css';\r\n\r\n\r\n\r\nconst Weather = (props) => {\r\n\r\n    \r\n    \r\n    \r\n        return (\r\n            <div className=\"info\">\r\n                \r\n                {\r\n                    props.tempreature && <p className=\"InfoKey\">temperature : <span className=\"infoValue\">{props.tempreature}</span></p>\r\n                }\r\n                {\r\n                    props.city &&  <p className=\"InfoKey\">city : <span className=\"infoValue\">{props.city}</span></p>\r\n                }\r\n                {\r\n                    props.rank && <p className=\"InfoKey\">Rank : <span className=\"infoValue\">{props.rank}</span></p>\r\n                }\r\n               {\r\n                   props.humidity && <p className=\"InfoKey\">Humidity : <span className=\"infoValue\">{props.humidity}</span></p>\r\n               }\r\n                {\r\n                    props.pressure && <p className=\"InfoKey\">Name : <span className=\"infoValue\">{props.pressure}</span></p>\r\n                }\r\n                {\r\n                    props.description && <p className=\"InfoKey\">description : <span className=\"infoValue\">{props.description}</span></p>\r\n                }\r\n                {\r\n                     props.error && <p className=\"InfoKey\"> Prix :<span className=\"infoValue\">{props.error}</span></p>\r\n                }\r\n                \r\n                \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Weather;","\r\n/* Example in Node.js ES6 using request-promise */\r\nimport {request} from 'request-promise';\r\nimport React, {Component,useState} from 'react';\r\nimport Weather from './Weather.js';\r\nimport cors from 'cors';\r\nimport './style.css';\r\nimport { FontAwesomeModule } from '@fortawesome/fontawesome-free';\r\n\r\n\r\n\r\n\r\n\r\nclass Crypto extends Component {\r\n\r\n    \r\n                        \r\n    constructor(props) {\r\n    ;\r\n        super(props);\r\n        this.state = { MwatAmout: 1,\r\n                    priceUSD : 2,\r\n                    Result : 1,\r\n                    KWTAmount : 0.11,\r\n                    KWTPrice : 0.057,\r\n                    KWTMonthly: 0,\r\n                    KWTYearly: 0, \r\n                };\r\n        \r\n\r\n        this._changeAmout = this._changeAmout.bind(this);\r\n        //this._changePrice = this._changePrice.bind(this);\r\n\r\n\r\n        \r\n      }\r\n\r\n      /*\r\n      _changePrice(e) {\r\n        if (e.target.validity.valid) {\r\n          //var newPrice = e.target.value\r\n          var newPrice = this.props.price\r\n          this.setState({\r\n              priceUSD: newPrice,\r\n              Result: this.state.MwatAmout * newPrice,\r\n              \r\n            }); \r\n            console.log(newPrice);\r\n        }}\r\n\r\n        */\r\n      \r\n      \r\n      _changeAmout(e) {\r\n        if (e.target.validity.valid) {\r\n          var newNum1 = e.target.value;\r\n          var newPrice = this.props.price;\r\n          var year = this.state.KWTPrice * newNum1\r\n          var month = year / 12\r\n          this.setState({\r\n              MwatAmout: newNum1,\r\n              priceUSD: newPrice,\r\n              Result: newNum1 * newPrice,\r\n              KWTAmount : newNum1 * 0.11,\r\n              KWTPrice : 0.057,\r\n              KWTMonthly: month,\r\n              KWTYearly: year,\r\n            }); \r\n            \r\n            \r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentWillMount(){\r\n        console.log('First this from crypto component');\r\n    }\r\n\r\n    componentDidMount(){\r\n      var newPrice = this.props.price;\r\n      this.setState({\r\n          MwatAmout: 1,\r\n          priceUSD: newPrice,\r\n          Result: 1 * newPrice,\r\n          KWTAmount : 1 * 0.11,\r\n        }); \r\n        \r\n          console.log('Prix USD : ',this.state.priceUSD);\r\n      }\r\n        \r\n      \r\n\r\n            \r\n             \r\n//--------- fin constructor\r\n\r\n\r\n    render() {\r\n      return (\r\n\r\n                    <div className=\"Cryptoform\">\r\n                    \r\n                    <div className=\"textstaking\">\r\n                    The Energy Community Fund represents a pool of KWT (in the amount of 5% of the total energy produced in the RED platform) which will be distributed to MWAT holders based on their ratio between their amount of MWAT and the total amount of MWAT staked.\r\n                    <p></p>\r\n                    </div>\r\n                        \r\n                        <form className=\"Gen\" onSubmit={this.getCrypto}>\r\n\r\n\r\n                        <table>\r\n                              <tr>\r\n                                  <td>\r\n                                      <p className=\"Fieldarea\">MWAT Price <input className=\"inputzone\" type=\"float\" name=\"price\" placeholder={this.props.price} value={this.props.price}  /></p>\r\n                                      <p className=\"Fieldarea\">MWAT Amount <input className=\"inputzone\"  type=\"number\" name=\"amout\"   placeholder=\"Enter MWAT Amount..\"   onChange={this._changeAmout}/></p>\r\n                                      <p className=\"Fieldarea\">Total (USD)<input className=\"inputzone\"  type=\"float\" value={this.state.Result}></input></p>\r\n                                      <div><p className=\"Fieldarea\">KWT Generated<input className=\"inputzone\"  type=\"float\" value={this.state.KWTAmount}></input></p></div>\r\n                                      <button className=\"ButtonC\">Refresh</button>\r\n                                  </td>\r\n\r\n                                  <td> </td>\r\n\r\n                                    <td>\r\n                                      <p className=\"Fieldarea\">KWT Price <input className=\"inputzone\" type=\"float\" name=\"price\" placeholder=\"0.057\" value={this.state.KWTPrice}  /></p>\r\n                                      <p className=\"Fieldarea\">Monthly KWT Reward (USD)<input className=\"inputzone\"  type=\"number\" name=\"amout\"   value={this.state.KWTMonthly}/></p>\r\n                                      <p className=\"Fieldarea\">Annualy KWT Reward (USD)<input className=\"inputzone\"  type=\"float\" value={this.state.KWTYearly}></input></p>\r\n                                      <p className=\"Fieldarea\">2022  kk never<input className=\"inputzone\"  type=\"float\" value={this.state.KWTAmount}></input></p>\r\n                                      \r\n                                    </td>\r\n                              </tr>\r\n                              \r\n                            </table>\r\n\r\n\r\n                        \r\n                        </form>\r\n\r\n\r\n                        \r\n                        \r\n\r\n                    </div>\r\n                    \r\n      \r\n\r\n             )\r\n        }\r\n    }\r\n\r\nexport default Crypto;","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ProgressLine = ({\r\n  label,\r\n  backgroundColor = \"#e5e5e5\",\r\n  // expected format for visual parts\r\n  visualParts = [\r\n    {\r\n      percentage: \"0%\",\r\n      color: \"white\"\r\n    }\r\n  ]\r\n}) => {\r\n  // Starting values needed for the animation\r\n  // Mapped by \"visualParts\" so it can work with multiple values dynamically\r\n  // It's an array of percentage widths\r\n  const [widths, setWidths] = useState(\r\n    visualParts.map(() => {\r\n      return 0;\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\r\n    // You need to wrap it to trigger the animation\r\n    requestAnimationFrame(() => {\r\n      // Set a new array of percentage widths based on the props\r\n      setWidths(\r\n        visualParts.map(item => {\r\n          return item.percentage;\r\n        })\r\n      );\r\n    });\r\n  }, [visualParts]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"progressLabel\">{label}</div>\r\n      <div\r\n        className=\"progressVisualFull\"\r\n        // to change the background color dynamically\r\n        style={{\r\n          backgroundColor\r\n        }}\r\n      >\r\n        {visualParts.map((item, index) => {\r\n          // map each part into separate div and each will be animated\r\n          // because of the \"transition: width 2s;\" css in class \"progressVisualPart\"\r\n          // and because of the new width (\"widths[index]\", previous one was 0)\r\n          return (\r\n            <div\r\n              // There won't be additional changes in the array so the index can be used\r\n              /* eslint-disable-next-line react/no-array-index-key */\r\n              key={index}\r\n              style={{\r\n                width: widths[index],\r\n                // setting the actual color of bar part\r\n                backgroundColor: item.color\r\n              }}\r\n              className=\"progressVisualPart\"\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProgressLine;\r\n","import React from 'react';\r\nimport './style.css';\r\nimport ProgressLine from '../progressbar/index.js';\r\n\r\n\r\nconst  Profile = (props) => {\r\n\r\n        console.log('price in the profile com:',Math.round(props.price * 100000) / 100000);\r\n        const pricerounded = Math.round(props.price * 1000000) / 1000000;\r\n     \r\n      return (\r\n        <div class=\"profile_skills\">\r\n            <div class=\"container\">\r\n                <div class=\"profile\">\r\n                    <h2 class=\"profile-title\">MWAT <span>Infos</span></h2>\r\n                    <ul class=\"profile-list\">\r\n                        <li class=\"profile-item\">\r\n                            <span>CMC Rank</span>\r\n                            {props.rank}\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Circulating Supply</span>\r\n                            452 750 000 MWAT\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Total Supply</span>\r\n                            500 000 000 MWAT\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Actual Price</span>\r\n                            ${pricerounded} USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>All Time High</span>\r\n                            $0.090036 USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>All Time Low</span>\r\n                            $0.007131 USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Platform</span>\r\n                            SWAZM Blockchain\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Staking Rewards</span>\r\n                            KWT\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                \r\n                <div class=\"skills\">\r\n                    <h2 class=\"skills-title\">Achievement <span></span></h2>\r\n                    <p class=\"skills-desc\">\r\n                    Restart Energy MWAT (MWAT) is a cryptocurrency token and operates on the Ethereum platform. Restart Energy MWAT has a current supply of 500,000,000 with 452,750,000 in circulation. \r\n                    </p>\r\n                    <div>\r\n                    <ProgressLine\r\n                                label=\"Staking\"\r\n                                backgroundColor=\"lightgrey\"\r\n                                visualParts={[\r\n                                {\r\n                                    percentage: \"80%\",\r\n                                    color: \"tomato\"\r\n                                }\r\n                                ]}\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                            <ProgressLine\r\n                                label=\"Exchange Listining\"\r\n                                backgroundColor=\"lightgrey\"\r\n                                visualParts={[\r\n                                {\r\n                                    percentage: \"45%\",\r\n                                    color: \"tomato\"\r\n                                }\r\n                                ]}\r\n                            />\r\n                    </div>\r\n\r\n                    <div>\r\n                       <ProgressLine\r\n                                label=\"Roadmap\"\r\n                                backgroundColor=\"lightgrey\"\r\n                                visualParts={[\r\n                                {\r\n                                    percentage: \"33%\",\r\n                                    color: \"tomato\"\r\n                                }\r\n                                ]}\r\n                            /> \r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport './style.css'\r\n\r\n\r\nconst Contact = () => {\r\n      return (\r\n        <div class=\"drop\">\r\n            <div class=\"container\">\r\n                <h2 class=\"drop-title\"><span>Drop </span>Me A line</h2>\r\n                <form action=\"\">\r\n                    <div class=\"form-input\">\r\n                        <input type=\"text\" placeholder=\"Your Name\" />\r\n                        <input type=\"email\" placeholder=\"Your Email\" />\r\n                    </div>\r\n                    <input type=\"text\" class=\"sub\" placeholder=\"Your Subject\" />\r\n                    <textarea cols=\"30\" rows=\"10\" placeholder=\"Your Message\"></textarea>\r\n                    <input type=\"submit\" value=\"Send Message\" />\r\n                </form>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport './style.css'\r\n\r\n\r\nconst Kucoin = () => {\r\n      return (\r\n        <div className=\"drop\">\r\n           <img className=\"kucoinimg\" src={process.env.PUBLIC_URL + '/kucoin.jpg'} alt=\"kucoin\" />\r\n           \r\n\r\n\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default Kucoin;\r\n","import React, { Component } from \"react\";\r\nimport Crypto from '../crypto/index.js';\r\nimport Weather from '../crypto/Weather.js';\r\nimport {request} from 'request-promise';\r\nimport Profile from '../Profile/index.js'\r\n \r\nclass Home extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            da: 'Loading...',\r\n            tempreature: 'Loading...',\r\n            city : 'Loading...',\r\n            rank : 'Loading...',\r\n            humidity : 'Loading...',\r\n            pressure: 'Loading...',\r\n            description : 'Loading...',\r\n            error : '',\r\n            \r\n        }\r\n      }\r\n      componentWillMount(){\r\n        console.log('First this called');\r\n        //{Crypto};\r\n    \r\n        //----------------\r\n    \r\n        const rp = require('request-promise');\r\n                \r\n                const requestOptions = {\r\n                    method: 'GET',\r\n                    uri: 'https://cors-anywhere.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest',\r\n                    qs: {\r\n                        'convert' : 'USD',\r\n                        'symbol': 'BTC,MWAT',\r\n          \r\n                    },\r\n                    headers: {\r\n                        'X-CMC_PRO_API_KEY': '7ffcb16b-6558-4585-902d-544336095aac'\r\n                    },\r\n                    json: true,\r\n                    gzip: true\r\n                    };\r\n          \r\n        rp(requestOptions).then(response => {console.log('API call response => ', response )\r\n                    \r\n    \r\n        this.setState ({\r\n            tempreature: 'Loading...',\r\n            city : 'Loading...',\r\n            rank : response.data['MWAT'].cmc_rank,\r\n            humidity : response.data['MWAT'].id,\r\n            pressure: response.data['MWAT'].name,\r\n            description : response.data['MWAT'].slug,\r\n            error : response.data['MWAT'].quote.USD.price,\r\n            }\r\n            );\r\n    \r\n            //console.log ('test');\r\n        \r\n        \r\n        ;}).catch((err) => {\r\n            console.log('API call error:', err.message); \r\n        \r\n        });\r\n        //-----------------\r\n        \r\n      }\r\n    \r\n      getData(){\r\n        setTimeout(() => {\r\n          console.log('Our data is fetched');\r\n          this.setState({\r\n            da: 'Hello WallStreet'\r\n          })\r\n        }, 10000)\r\n      }\r\n    \r\n      componentDidMount(){\r\n        this.getData();\r\n      }\r\n    \r\n\r\n  render() {\r\n    return (\r\n                <div>\r\n                <Crypto price={this.state.error}/>\r\n\r\n                <Profile rank={this.state.rank} price={this.state.error} />\r\n                <Weather \r\n                                    tempreature={this.state.tempreature}\r\n                                    city={this.state.city}\r\n                                    rank={this.state.rank}\r\n                                    humidity={this.state.humidity}\r\n                                    pressure={this.state.pressure}\r\n                                    description={this.state.description}\r\n                                    error={this.state.error}\r\n                            />\r\n                </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/index.js';\nimport {BrowserRouter , Route } from 'react-router-dom';\nimport Crypto from './components/crypto/index.js';\nimport Weather from './components/crypto/Weather.js';\nimport Profile from './components/Profile/index.js';\n\nimport Contact from './components/Contact/index.js';\nimport Kucoin from './components/kucoin/index.js';\nimport Home from './components/home/index.js'\n\n\n\nclass App extends Component {\n\n  \n\n  render() {\n    return (\n\n      \n      <BrowserRouter>\n          <Navbar />\n          <Route exact strict path='/' component={Home} />\n          <Route path='/BuyMwat' component={Kucoin}/>\n          <Route path='/Contact' component={Contact} />\n          \n\n      </BrowserRouter>\n      \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}