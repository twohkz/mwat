{"version":3,"sources":["components/navbar/index.js","components/crypto/Weather.js","components/crypto/index.js","components/Profile/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","process","alt","to","href","Weather","props","tempreature","city","rank","humidity","pressure","description","error","Crypto","state","MwatAmout","priceUSD","Result","KWTAmount","_changeAmout","bind","e","target","validity","valid","newNum1","value","newPrice","this","price","setState","console","log","getCrypto","onSubmit","type","name","placeholder","onChange","Component","Profile","Math","round","pricerounded","class","App","da","require","rp","method","uri","qs","headers","json","gzip","then","response","data","cmc_rank","id","slug","quote","USD","catch","err","message","setTimeout","getData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63b018d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './style.css';\r\n//import logo from './logo.png';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    return(\r\n        \r\n        <div className=\"navbar\">\r\n            \r\n            <div className=\"container\">\r\n                \r\n                <div className=\"logo\">\r\n                    <img src={process.env.PUBLIC_URL + '/logo.png'} alt=\"logo\" />\r\n                    \r\n                </div>\r\n                \r\n                <ul className=\"ul-list\">\r\n                    <li className=\"list-item\"><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"list-item\"><a href=\"#\">Work</a></li>\r\n                    <li className=\"list-item\"><a href=\"#\">Portfolio</a></li>\r\n                    <li className=\"list-item\"><a href=\"#\">Resume</a></li>\r\n                    <li className=\"list-item\"><Link to=\"/Contact\">Contact</Link></li>\r\n                </ul>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react' ;\r\nimport './style.css';\r\n\r\n\r\n\r\nconst Weather = (props) => {\r\n\r\n    \r\n    \r\n    \r\n        return (\r\n            <div className=\"info\">\r\n                \r\n                {\r\n                    props.tempreature && <p className=\"InfoKey\">temperature : <span className=\"infoValue\">{props.tempreature}</span></p>\r\n                }\r\n                {\r\n                    props.city &&  <p className=\"InfoKey\">city : <span className=\"infoValue\">{props.city}</span></p>\r\n                }\r\n                {\r\n                    props.rank && <p className=\"InfoKey\">Rank : <span className=\"infoValue\">{props.rank}</span></p>\r\n                }\r\n               {\r\n                   props.humidity && <p className=\"InfoKey\">Humidity : <span className=\"infoValue\">{props.humidity}</span></p>\r\n               }\r\n                {\r\n                    props.pressure && <p className=\"InfoKey\">Name : <span className=\"infoValue\">{props.pressure}</span></p>\r\n                }\r\n                {\r\n                    props.description && <p className=\"InfoKey\">description : <span className=\"infoValue\">{props.description}</span></p>\r\n                }\r\n                {\r\n                     props.error && <p className=\"InfoKey\"> Prix :<span className=\"infoValue\">{props.error}</span></p>\r\n                }\r\n                \r\n                \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Weather;","\r\n/* Example in Node.js ES6 using request-promise */\r\nimport {request} from 'request-promise';\r\nimport React, {Component,useState} from 'react';\r\nimport Weather from './Weather.js';\r\nimport cors from 'cors';\r\nimport './style.css';\r\nimport { FontAwesomeModule } from '@fortawesome/fontawesome-free';\r\n\r\n\r\n\r\n\r\n\r\nclass Crypto extends Component {\r\n\r\n    \r\n                        \r\n    constructor(props) {\r\n    ;\r\n        super(props);\r\n        this.state = { MwatAmout: 1,\r\n                    priceUSD : 2,\r\n                    Result : 1,\r\n                    KWTAmount : 0.11, \r\n                };\r\n        \r\n\r\n        this._changeAmout = this._changeAmout.bind(this);\r\n        //this._changePrice = this._changePrice.bind(this);\r\n\r\n\r\n        \r\n      }\r\n\r\n      /*\r\n      _changePrice(e) {\r\n        if (e.target.validity.valid) {\r\n          //var newPrice = e.target.value\r\n          var newPrice = this.props.price\r\n          this.setState({\r\n              priceUSD: newPrice,\r\n              Result: this.state.MwatAmout * newPrice,\r\n              \r\n            }); \r\n            console.log(newPrice);\r\n        }}\r\n\r\n        */\r\n      \r\n      \r\n      _changeAmout(e) {\r\n        if (e.target.validity.valid) {\r\n          var newNum1 = e.target.value;\r\n          var newPrice = this.props.price;\r\n          this.setState({\r\n              MwatAmout: newNum1,\r\n              priceUSD: newPrice,\r\n              Result: newNum1 * newPrice,\r\n              KWTAmount : newNum1 * 0.11,\r\n            }); \r\n        }\r\n    }\r\n\r\n\r\n    componentWillMount(){\r\n        console.log('First this from crypto component');\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n          console.log('Prix USD : ',this.state.priceUSD);\r\n      }\r\n        \r\n      \r\n\r\n            \r\n             \r\n//--------- fin constructor\r\n\r\n\r\n    render() {\r\n      return (\r\n\r\n                    <div className=\"Cryptoform\">\r\n                         {this.getCrypto\r\n                         }\r\n                        response : \r\n                        the crypto Component\r\n                    \r\n                        <form className=\"Gen\" onSubmit={this.getCrypto}>\r\n                        <span className=\"formtext\">&#x3C;Form /&#x3E;</span>\r\n                            <p className=\"Fieldarea\">MWAT Price <input type=\"float\" name=\"price\" placeholder={this.props.price} value={this.props.price}  /></p>\r\n                            <p className=\"Fieldarea\">MWAT Amount <input type=\"number\" name=\"amout\"   placeholder=\"Enter MWAT Amount..\"   onChange={this._changeAmout}/></p>\r\n                            <p className=\"Fieldarea\">Total (USD)<input type=\"float\" value={this.state.Result}></input></p>\r\n                            <div><p className=\"Fieldarea\">KWT Generated<input type=\"float\" value={this.state.KWTAmount}></input></p></div>\r\n                            <button className=\"ButtonC\">Calculate</button>\r\n                        </form>\r\n\r\n\r\n                        \r\n\r\n                    </div>\r\n\r\n             )\r\n        }\r\n    }\r\n\r\nexport default Crypto;","import React from 'react';\r\nimport './style.css'\r\n\r\n\r\nconst  Profile = (props) => {\r\n\r\n        console.log('price in the profile com:',Math.round(props.price * 100000) / 100000);\r\n        const pricerounded = Math.round(props.price * 1000000) / 1000000;\r\n     \r\n      return (\r\n        <div class=\"profile_skills\">\r\n            <div class=\"container\">\r\n                <div class=\"profile\">\r\n                    <h2 class=\"profile-title\">MWAT <span>Infos</span></h2>\r\n                    <ul class=\"profile-list\">\r\n                        <li class=\"profile-item\">\r\n                            <span>CMC Rank</span>\r\n                            {props.rank}\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Circulating Supply</span>\r\n                            452 750 000 MWAT\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Total Supply</span>\r\n                            500 000 000 MWAT\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Actual Price</span>\r\n                            ${pricerounded} USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>All Time High</span>\r\n                            $0.090036 USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>All Time Low</span>\r\n                            $0.007131 USD\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Platform</span>\r\n                            SWAZM Blockchain\r\n                        </li>\r\n                        <li class=\"profile-item\">\r\n                            <span>Staking Rewards</span>\r\n                            KWT\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                \r\n                <div class=\"skills\">\r\n                    <h2 class=\"skills-title\">Achievement <span></span></h2>\r\n                    <p class=\"skills-desc\">\r\n                    Restart Energy MWAT (MWAT) is a cryptocurrency token and operates on the Ethereum platform. Restart Energy MWAT has a current supply of 500,000,000 with 452,750,000 in circulation. \r\n                    </p>\r\n                    <div class=\"bar\">\r\n                        <span class=\"title\">Staking</span>\r\n                        <span class=\"perc\">100%</span>\r\n                        <div class=\"parent\">\r\n                            <span class=\"sp1\"></span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"bar\">\r\n                        <span class=\"title\">Exchange Listing</span>\r\n                        <span class=\"perc\">40%</span>\r\n                        <div class=\"parent\">\r\n                            <span class=\"sp2\"></span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"bar\">\r\n                        <span class=\"title\">Roadmap</span>\r\n                        <span class=\"perc\">60%</span>\r\n                        <div class=\"parent\">\r\n                            <span class=\"sp3\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default Profile;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/index.js';\nimport {BrowserRouter , Route } from 'react-router-dom';\nimport Crypto from './components/crypto/index.js';\nimport Weather from './components/crypto/Weather.js';\nimport Profile from './components/Profile/index.js';\nimport {request} from 'request-promise';\n\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n        da: 'Loading...',\n        tempreature: 'Loading...',\n        city : 'Loading...',\n        rank : 'Loading...',\n        humidity : 'Loading...',\n        pressure: 'Loading...',\n        description : 'Loading...',\n        error : '',\n        \n    }\n  }\n  componentWillMount(){\n    console.log('First this called');\n    //{Crypto};\n\n    //----------------\n\n    const rp = require('request-promise');\n            \n            const requestOptions = {\n                method: 'GET',\n                uri: 'https://cors-anywhere.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest',\n                qs: {\n                    'convert' : 'USD',\n                    'symbol': 'BTC,MWAT',\n      \n                },\n                headers: {\n                    'X-CMC_PRO_API_KEY': '7ffcb16b-6558-4585-902d-544336095aac'\n                },\n                json: true,\n                gzip: true\n                };\n      \n    rp(requestOptions).then(response => {console.log('API call response => ', response )\n                \n\n    this.setState ({\n        tempreature: 'Loading...',\n        city : 'Loading...',\n        rank : response.data['MWAT'].cmc_rank,\n        humidity : response.data['MWAT'].id,\n        pressure: response.data['MWAT'].name,\n        description : response.data['MWAT'].slug,\n        error : response.data['MWAT'].quote.USD.price,\n        }\n        );\n\n        //console.log ('test');\n    \n    \n    ;}).catch((err) => {\n        console.log('API call error:', err.message); \n    \n    });\n    //-----------------\n    \n  }\n\n  getData(){\n    setTimeout(() => {\n      console.log('Our data is fetched');\n      this.setState({\n        da: 'Hello WallStreet'\n      })\n    }, 10000)\n  }\n\n  componentDidMount(){\n    this.getData();\n  }\n\n\n  render() {\n    return (\n\n     \n      <BrowserRouter>\n          <Navbar />\n          \n          <Crypto price={this.state.error}/>\n\n          <Profile rank={this.state.rank} price={this.state.error}/>\n          <Weather \n                                tempreature={this.state.tempreature}\n                                city={this.state.city}\n                                rank={this.state.rank}\n                                humidity={this.state.humidity}\n                                pressure={this.state.pressure}\n                                description={this.state.description}\n                                error={this.state.error}\n                        />\n\n\n      </BrowserRouter>\n      \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}